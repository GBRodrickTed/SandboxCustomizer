using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UnityEngine;
using UnityEngine.Events;
using UnityEngine.UI;
using static UnityEngine.RemoteConfigSettingsHelper;

namespace SandboxCustomizer
{
    public class LightColorSlider : MonoBehaviour
    {
        public Slider slider_r;
        public Slider slider_g;
        public Slider slider_b;
        public Slider slider_mag;
        public Image color_img;
        public Color color_true;
        public Color color;
        public UnityEvent on_value_change_event;
        public void Start()
        {
            color = Color.white;
            color_true = Color.white;
            slider_r = Utils.ReplaceSliderForShop(transform.Find("Red").gameObject, transform).GetComponent<Slider>();
            slider_g = Utils.ReplaceSliderForShop(transform.Find("Green").gameObject, transform).GetComponent<Slider>();
            slider_b = Utils.ReplaceSliderForShop(transform.Find("Blue").gameObject, transform).GetComponent<Slider>();
            slider_mag = Utils.ReplaceSliderForShop(transform.Find("Magnitude").gameObject, transform).GetComponent<Slider>();
            color_img = transform.Find("Color").GetComponent<Image>();
            UpdateColor();
            on_value_change_event = new UnityEvent();
            slider_r.onValueChanged.AddListener(new UnityAction<float>((call) =>
            {
                UpdateColor();
                on_value_change_event.Invoke();
            }));
            slider_g.onValueChanged.AddListener(new UnityAction<float>((call) =>
            {
                UpdateColor();
                on_value_change_event.Invoke();
            }));
            slider_b.onValueChanged.AddListener(new UnityAction<float>((call) =>
            {
                UpdateColor();
                on_value_change_event.Invoke();
            }));
            slider_mag.onValueChanged.AddListener(new UnityAction<float>((call) =>
            {
                UpdateColor();
                on_value_change_event.Invoke();
            }));
        }
        public void UpdateColor()
        {
            color_true.r = slider_r.value;
            color_true.g = slider_g.value;
            color_true.b = slider_b.value;

            color_true.a = 1;

            float alpha = Mathf.Max(slider_r.value, Math.Min(slider_g.value, slider_b.value));
            float alpha_inv = 1 / alpha;


            color.r = (color_true.r * alpha_inv);
            color.g = (color_true.g * alpha_inv);
            color.b = (color_true.b * alpha_inv);
            color.a = alpha;

            color_img.color = this.color;
        }

        public void SetColor(Color col)
        {
            slider_r.value = col.r;
            slider_g.value = col.g;
            slider_b.value = col.b;
            slider_mag.value = col.a/2;
            UpdateColor();
        }
    }
}
